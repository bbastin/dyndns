# SPDX-FileCopyrightText: 2024 Benedikt Bastin
#
# SPDX-License-Identifier: CC0-1.0

# git-cliff ~ configuration file
# https://git-cliff.org/docs/configuration

[changelog]
# template for the changelog footer
header = """
# Changelog\n
All notable changes to this project will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.1.0/),
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n
"""
# template for the changelog body
# https://keats.github.io/tera/docs/#introduction
body = """
{% if version -%}
    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else -%}
    ## [Unreleased]
{% endif -%}
{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | upper_first }}
    {% for commit in commits %}
        - {{ commit.message | upper_first }}\
    {% endfor %}
{% endfor %}\n
"""
# template for the changelog footer
footer = """
{% for release in releases -%}
    {% if release.version -%}
        {% if release.previous.version -%}
            [{{ release.version | trim_start_matches(pat="v") }}]: \
                https://github.com/{{ remote.github.owner }}/{{ remote.github.repo }}\
                    /compare/{{ release.previous.version }}..{{ release.version }}
        {% endif -%}
    {% else -%}
        [unreleased]: https://github.com/{{ remote.github.owner }}/{{ remote.github.repo }}\
            /compare/{{ release.previous.version }}..HEAD
    {% endif -%}
{% endfor %}
<!-- generated by git-cliff -->
"""
# remove the leading and trailing whitespace from the templates
trim = true

[git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = true
# process each line of a commit as an individual commit
split_commits = false
# regex for parsing and grouping commits
commit_parsers = [
  { message = "^.*: Add", group = "<!-- 1 -->Added" },
  { message = "^.*: New", group = "<!-- 1 -->Added" },
  { message = "^feat:", group = "<!-- 1 -->Added" },

  { message = "^.*: Remove", group = "<!-- 4 -->Removed" },
  { message = "^.*: Delete", group = "<!-- 4 -->Removed" },

  { message = "^fix:", group = "<!-- 5 -->Fixed" },
  { message = "^.*: Fix", group = "<!-- 5 -->Fixed" },

  { message = "^.*: Deprecate", group = "<!-- 3 -->Deprecated" },

  { message = "CVE", group = "<!-- 0 -->Security" },
  { message = "[Ss]ecurity", group = "<!-- 0 -->Security" },

  { message = "^docs: Update changelog", skip = true },
  { message = "^chore: Release", skip = true },

  { message = "^build:", group = "<!-- 2 -->Changed" },
  { message = "^chore:", group = "<!-- 2 -->Changed" },
  { message = "^ci:", group = "<!-- 2 -->Changed" },
  { message = "^docs:", group = "<!-- 2 -->Changed" },
  { message = "^style:", group = "<!-- 2 -->Changed" },
  { message = "^refactor:", group = "<!-- 2 -->Changed" },
  { message = "^perf:", group = "<!-- 2 -->Changed" },
  { message = "^test:", group = "<!-- 2 -->Changed" },
  { message = "^.*", group = "<!-- 2 -->Changed" },

]
# protect breaking changes from being skipped due to matching a skipping commit_parser
protect_breaking_commits = true
# filter out the commits that are not matched by commit parsers
filter_commits = true
# regex for matching git tags
tag_pattern = "v[0-9].*"
# sort the tags topologically
topo_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "oldest"
